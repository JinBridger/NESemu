#ifndef _CPU_H_
#define _CPU_H_
#include "MainBus.h"

class CPU {
 public:
  enum InterruptType {
    IRQ, /* Maskable interrupts (aka IRQs) can be generated by external
            circuitry on the cart  */
    NMI, /* NES uses non-maskable interrupts (NMIs) generated by PPU in the end
            of each frame (so-called VBlank interrupts).  */
    BRK_ /* Break */
  };
  CPU(MainBus &mem);

  void Reset();
  void Reset(Address start_address);
  void SkipDMACycles();
  void Step();
  Address GetPC() { return r_PC; }
  void Interrupt(InterruptType type);

 private:
  Address ReadAddress(Address addr);

  bool ExecuteImplied(Byte opcode);
  bool ExecuteBranch(Byte opcode);
  bool ExecuteType0(Byte opcode);
  bool ExecuteType1(Byte opcode);
  bool ExecuteType2(Byte opcode);

  void SetPageCrossed(Address a, Address b, int inc = 1);
  /* CPU exec instruction*/
  void PushStack(Byte value);
  Byte PullStack();
  void SetZN(Byte value);

  int m_skipCycles;
  int m_cycles;

  Address r_PC;  // PC
  Byte r_SP;     /* Stack Pointer */
  Byte r_A;      /* Accumulator */
  Byte r_X;      /* index Reg X */
  Byte r_Y;      /* index Reg Y */

  /* Processor Status Reg */
  bool f_C; /* Carry */
  bool f_Z; /* Zero */
  bool f_I; /* IRQ disable */
  // bool f_B;         /* Brk command */
  bool f_D; /* Decimal mode */
  bool f_V; /* Overflow  */
  bool f_N; /* Negative */

  MainBus &m_bus;
};

#endif